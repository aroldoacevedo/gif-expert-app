{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GitGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EAhCK,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAEJC,mBAAS,IAFL,mBAEjCC,EAFiC,KAErBC,EAFqB,KAgBxC,OACC,uBAAMC,SATc,SAACC,GACxBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKZ,UACF,mCAAOD,EAAP,OACA,uBACCQ,KAAK,OACLC,MAAQT,EACRU,SAlB0B,SAACP,GAC7BF,EAAcE,EAAEQ,OAAOF,c,+BCPZG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCWLO,EAVK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEzB,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAON,IACxB,4BAAIA,QCqBDO,EAvBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBxC,OAlBAC,qBAAU,WAENxB,EAASC,GACRwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACIf,KAAKkB,EACLL,SAAQ,SAItC,CAAEpB,IASGqB,EDpB2BK,CAAa1B,GAAjCa,EAHgB,EAGtBN,KAAca,EAHQ,EAGRA,QAEtB,OAAQ,qCACI,oBAAIJ,UAAW,oCAAf,SAAqDhB,IACpDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACX,qBAAKA,UAAU,YAAf,SAEOH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEiBtBgB,EA9BM,WAAM,MAGazC,mBAAS,CAAC,cAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAUvB,OACF,qCACC,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEC2C,EAAWnB,KAAI,SAAAT,GAAQ,OAEvB,aADA,CACC,EAAD,CACEA,SAAaA,GADAA,Y,MClBnB6B,IAASC,OAAQ,cAAE,EAAF,IACbC,SAASC,eAAe,W","file":"static/js/main.a78ff90d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( { setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n\t\tsetInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif( inputValue.trim().length > 2){\n\t\t\tsetCategories( cats => [ inputValue, ...cats ]);\n\t\t\tsetInputValue('');\n\t\t}\n    }\n\n    return (\n\t    <form onSubmit={ handleSubmit }> \n\t\t\t<h1> { inputValue } </h1>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={ inputValue }\n\t\t\t\tonChange={ handleInputChange }\n\t\t\t/>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory","\nexport const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=ImrhTAPyXNBsMYiFmxJPhrOI4bJ8Z2WQ`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        };\n    });\n    return gifs;\n    //console.log(gifs);\n    //setImages(gifs);\n}","import React from 'react'\n\nconst GifGridItem = ({title, url}) => {\n/*const GifGridItem = ({img}) => {*/\n    return (\n        <div className=\"card animate__animated animate__fadeIn\"> \n            <img src={ url } alt = {title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n//import { getGifs } from '../helpers/getGifs';\n\nconst GitGrid = ({ category }) => {\n\n    //const [images, setImages] = useState([]);\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (<>\n                <h3 className =\"animate__animated animate__fadeIn\">{ category }</h3>  \n                {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n                {<div className=\"card-grid\">\n                    {\n                        images.map(img => (\n                            <GifGridItem \n                            key={img.id}\n                            { ...img}\n                            />\n                        ))\n                    }\n                \n                </div>}\n            </>\n    )\n}\n\nexport default GitGrid","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect(() => {\n\n        getGifs( category )\n        .then( imgs => setState({\n                                    data:imgs,\n                                    loading:false\n                                })\n            );\n\n    },[ category ]);\n\n    /*setTimeout(() => {\n        setState({\n            data:[1,2,3,4,5],\n            loading:false\n        })\n    }, 3000);*/\n\n    return state;//{ data:[],loading:true}\n\n}","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GitGrid from './components/GitGrid';\n\nconst GitExpertApp = () => {\n\n    //const categories = ['One Punch'];\n    const [categories, setCategories] = useState(['One Punch']);\n\n    //const handleAdd = () => {\n    //\t//setCategories(['HunterXHunter', ...categories]);\n    //  setCategories( cats => [...cats, 'HunterXHunter']);\n    //}\n\n    return (\n\t\t<>\n\t\t\t<h2> GitExpertApp </h2>\n\t\t\t<AddCategory setCategories={ setCategories } />\n\t\t\t<hr/>\n\t\t\t{/*<button onClick={ handleAdd }>Agregar</button>*/}\n\t\t\t<ol>\n\t\t\t{ \n\t\t\t\tcategories.map(category => (\n\t\t\t\t/*<li key={ category }> {category} </li>*/\n\t\t\t\t<GitGrid key={ category }\n\t\t\t\t\t\tcategory = { category } />\n\t\t\t\t))\n\t\t\t}\n\t\t\t</ol>\n\t\t</>\n    );\n\n}\n\nexport default GitExpertApp;\n//i6akj9kp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\n\nimport './index.css';\n\nReactDOM.render( < GitExpertApp / > ,\n    document.getElementById('root')\n);"],"sourceRoot":""}